from git.client import GitReadonlyClient
from model.ruleset import ScopedRuleset
from model.verifier_results import FailedRule, CommitScopedRulesetVerifierResult


class CommitScopedRulesetVerifier:
    """Verifies that the ongoing commit is valid"""
    def __init__(self, git_client: GitReadonlyClient) -> None:
        self.__git = git_client

    def verify_commit_scoped_ruleset(
        self, scoped_ruleset: ScopedRuleset, commit_message_file: str
    ) -> CommitScopedRulesetVerifierResult:
        """Verifies if a given scoped_ruleset is in-scope and if its rules passed.

        Args:
            scoped_ruleset (ScopedRuleset): the scoped ruleset to evaluate
            commit_message_file (str): the temporary file generated by git with the commit message as content

        Returns:
            CommitScopedRulesetVerifierResult: data class with info such as failed rules and whether or not scope is in-scope or if the commit should fail
        """
        # TODO: replace with actual implementation
        try:
            return CommitScopedRulesetVerifierResult(
                triggered_scope=scoped_ruleset.scope_name,
                should_fail=True,
                failed_rules=[
                    FailedRule(
                        rule=next(scoped_ruleset.ruleset.__iter__()),
                        container_scope_name=scoped_ruleset.scope_name,
                        failed_reason="Expected a maximum commit message size of 100, but commit message is 237 characters long",
                    )
                ],
            )
        except:
            return CommitScopedRulesetVerifierResult(
                triggered_scope=scoped_ruleset.scope_name, should_fail=False
            )
